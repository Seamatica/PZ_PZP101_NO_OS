/***************************************************************************//**
 *   @file   main.c
 *   @brief  Implementation of Main Function.
 *   @author DBogdan (dragos.bogdan@analog.com)
********************************************************************************
 * Copyright 2013(c) Analog Devices, Inc.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  - Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  - Neither the name of Analog Devices, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *  - The use of this software may or may not infringe the patent rights
 *    of one or more patent holders.  This license does not release you
 *    from the requirement that you obtain separate licenses from these
 *    patent holders to use this software.
 *  - Use of the software either in source or binary form, must be run
 *    on or directly connected to an Analog Devices Inc. component.
 *
 * THIS SOFTWARE IS PROVIDED BY ANALOG DEVICES "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, NON-INFRINGEMENT,
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL ANALOG DEVICES BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, INTELLECTUAL PROPERTY RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*******************************************************************************/

//#define CONSOLE_COMMANDS
#define  XILINX_PLATFORM
#define ADC_DMA_EXAMPLE
/******************************************************************************/
/***************************** Include Files **********************************/
/******************************************************************************/
#include "config.h"
#include "ad9361_api.h"
#include "parameters.h"
#include "platform.h"

#ifdef XILINX_PLATFORM
#include <xil_cache.h>
#endif
#if defined XILINX_PLATFORM || defined LINUX_PLATFORM || defined ALTERA_PLATFORM
#include "adc_core.h"
#include "dac_core.h"
#endif

#include <stdio.h>
#include <inttypes.h> // For PRIu32
#include "xparameters.h"
#include "xgpio.h"
#include "sleep.h"

#include "uart_com.h"

#include "gpsdo.h"

#define AXI_GPIO_DEVICE_ID_0 XPAR_AXI_GPIO_0_DEVICE_ID // AXI GPIO ID
#define AXI_GPIO_DEVICE_ID_1 XPAR_AXI_GPIO_1_DEVICE_ID // AXI GPIO ID
#define AXI_GPIO_DEVICE_ID_2 XPAR_AXI_GPIO_2_DEVICE_ID // AXI GPIO ID


#define GPIO_CHANNEL_1 1 // First GPIO Channel
#define GPIO_CHANNEL_2 2 // First GPIO Channel

XGpio axi_gpio_inst_0; // AXI GPIO 0 instance
XGpio axi_gpio_inst_1; // AXI GPIO 1 instance
XGpio axi_gpio_inst_2; // AXI GPIO 2 instance



//// AXI Peak Detector
//#define AXI_GPIO_PEAK_DETECTOR_DEVICE_ID XPAR_PEAK_RESET_THRESHOLD_DEVICE_ID
//XGpio axi_gpio_peak_detector; // AXI GPIO instance

// AXI GPIO for GPSDO related control
#define AXI_GPSDO_GPIO_DEVICE_ID XPAR_GPSDO_GPIO_DEVICE_ID
XGpio gpioGPSDO; // AXI GPIO instance
XGpio_Config *gpioGPSDO_config;


/******************************************************************************/
/************************ Variables Definitions *******************************/
/******************************************************************************/


AD9361_InitParam default_init_param = {
	/* Device selection */
	ID_AD9361,	// dev_sel
	/* Identification number */
	0,		//id_no
	/* Reference Clock */
	40000000UL,	//reference_clk_rate
	/* Base Configuration */
	0,		//two_rx_two_tx_mode_enable *** adi,2rx-2tx-mode-enable
	1,		//one_rx_one_tx_mode_use_rx_num *** adi,1rx-1tx-mode-use-rx-num
	2,		//one_rx_one_tx_mode_use_tx_num *** adi,1rx-1tx-mode-use-tx-num
	1,		//frequency_division_duplex_mode_enable *** adi,frequency-division-duplex-mode-enable
	0,		//frequency_division_duplex_independent_mode_enable *** adi,frequency-division-duplex-independent-mode-enable
	0,		//tdd_use_dual_synth_mode_enable *** adi,tdd-use-dual-synth-mode-enable
	0,		//tdd_skip_vco_cal_enable *** adi,tdd-skip-vco-cal-enable
	0,		//tx_fastlock_delay_ns *** adi,tx-fastlock-delay-ns
	0,		//rx_fastlock_delay_ns *** adi,rx-fastlock-delay-ns
	0,		//rx_fastlock_pincontrol_enable *** adi,rx-fastlock-pincontrol-enable
	0,		//tx_fastlock_pincontrol_enable *** adi,tx-fastlock-pincontrol-enable
	0,		//external_rx_lo_enable *** adi,external-rx-lo-enable
	0,		//external_tx_lo_enable *** adi,external-tx-lo-enable
	5,		//dc_offset_tracking_update_event_mask *** adi,dc-offset-tracking-update-event-mask
	6,		//dc_offset_attenuation_high_range *** adi,dc-offset-attenuation-high-range
	5,		//dc_offset_attenuation_low_range *** adi,dc-offset-attenuation-low-range
	0x28,	//dc_offset_count_high_range *** adi,dc-offset-count-high-range
	0x32,	//dc_offset_count_low_range *** adi,dc-offset-count-low-range
	0,		//split_gain_table_mode_enable *** adi,split-gain-table-mode-enable
	MAX_SYNTH_FREF,	//trx_synthesizer_target_fref_overwrite_hz *** adi,trx-synthesizer-target-fref-overwrite-hz
	0,		// qec_tracking_slow_mode_enable *** adi,qec-tracking-slow-mode-enable
	/* ENSM Control */
	0,		//ensm_enable_pin_pulse_mode_enable *** adi,ensm-enable-pin-pulse-mode-enable
	0,		//ensm_enable_txnrx_control_enable *** adi,ensm-enable-txnrx-control-enable
	/* LO Control */
	1030000000UL, //2400000000UL,	//rx_synthesizer_frequency_hz *** adi,rx-synthesizer-frequency-hz
	1030000000UL, //2400000000UL,	//tx_synthesizer_frequency_hz *** adi,tx-synthesizer-frequency-hz
	1,				//tx_lo_powerdown_managed_enable *** adi,tx-lo-powerdown-managed-enable
	/* Rate & BW Control */
	{983040000, 491520000, 245760000, 122880000, 61440000, 61440000},//{983040000, 245760000, 122880000, 61440000, 30720000, 30720000},// rx_path_clock_frequencies[6] *** adi,rx-path-clock-frequencies
	{983040000, 245760000, 245760000, 122880000, 61440000, 61440000},//{983040000, 122880000, 122880000, 61440000, 30720000, 30720000},// tx_path_clock_frequencies[6] *** adi,tx-path-clock-frequencies
	5000000, //18000000,//rf_rx_bandwidth_hz *** adi,rf-rx-bandwidth-hz
	5000000, //18000000,//rf_tx_bandwidth_hz *** adi,rf-tx-bandwidth-hz
	/* RF Port Control */
	0,		//rx_rf_port_input_select *** adi,rx-rf-port-input-select
	0,		//tx_rf_port_input_select *** adi,tx-rf-port-input-select
	/* TX Attenuation Control */
	10000,	//tx_attenuation_mdB *** adi,tx-attenuation-mdB
	0,		//update_tx_gain_in_alert_enable *** adi,update-tx-gain-in-alert-enable
	/* Reference Clock Control */
	0,		//xo_disable_use_ext_refclk_enable *** adi,xo-disable-use-ext-refclk-enable
	{8, 5920},	//dcxo_coarse_and_fine_tune[2] *** adi,dcxo-coarse-and-fine-tune
	CLKOUT_DISABLE,	//clk_output_mode_select *** adi,clk-output-mode-select
	/* Gain Control */
	0,//2,		//gc_rx1_mode *** adi,gc-rx1-mode
	0,//2,		//gc_rx2_mode *** adi,gc-rx2-mode
	58,		//gc_adc_large_overload_thresh *** adi,gc-adc-large-overload-thresh
	4,		//gc_adc_ovr_sample_size *** adi,gc-adc-ovr-sample-size
	47,		//gc_adc_small_overload_thresh *** adi,gc-adc-small-overload-thresh
	8192,	//gc_dec_pow_measurement_duration *** adi,gc-dec-pow-measurement-duration
	0,		//gc_dig_gain_enable *** adi,gc-dig-gain-enable
	800,	//gc_lmt_overload_high_thresh *** adi,gc-lmt-overload-high-thresh
	704,	//gc_lmt_overload_low_thresh *** adi,gc-lmt-overload-low-thresh
	24,		//gc_low_power_thresh *** adi,gc-low-power-thresh
	15,		//gc_max_dig_gain *** adi,gc-max-dig-gain
	/* Gain MGC Control */
	2,		//mgc_dec_gain_step *** adi,mgc-dec-gain-step
	2,		//mgc_inc_gain_step *** adi,mgc-inc-gain-step
	0,		//mgc_rx1_ctrl_inp_enable *** adi,mgc-rx1-ctrl-inp-enable
	0,		//mgc_rx2_ctrl_inp_enable *** adi,mgc-rx2-ctrl-inp-enable
	0,		//mgc_split_table_ctrl_inp_gain_mode *** adi,mgc-split-table-ctrl-inp-gain-mode
	/* Gain AGC Control */
	10,		//agc_adc_large_overload_exceed_counter *** adi,agc-adc-large-overload-exceed-counter
	2,		//agc_adc_large_overload_inc_steps *** adi,agc-adc-large-overload-inc-steps
	0,		//agc_adc_lmt_small_overload_prevent_gain_inc_enable *** adi,agc-adc-lmt-small-overload-prevent-gain-inc-enable
	10,		//agc_adc_small_overload_exceed_counter *** adi,agc-adc-small-overload-exceed-counter
	4,		//agc_dig_gain_step_size *** adi,agc-dig-gain-step-size
	3,		//agc_dig_saturation_exceed_counter *** adi,agc-dig-saturation-exceed-counter
	1000,	// agc_gain_update_interval_us *** adi,agc-gain-update-interval-us
	0,		//agc_immed_gain_change_if_large_adc_overload_enable *** adi,agc-immed-gain-change-if-large-adc-overload-enable
	0,		//agc_immed_gain_change_if_large_lmt_overload_enable *** adi,agc-immed-gain-change-if-large-lmt-overload-enable
	10,		//agc_inner_thresh_high *** adi,agc-inner-thresh-high
	1,		//agc_inner_thresh_high_dec_steps *** adi,agc-inner-thresh-high-dec-steps
	12,		//agc_inner_thresh_low *** adi,agc-inner-thresh-low
	1,		//agc_inner_thresh_low_inc_steps *** adi,agc-inner-thresh-low-inc-steps
	10,		//agc_lmt_overload_large_exceed_counter *** adi,agc-lmt-overload-large-exceed-counter
	2,		//agc_lmt_overload_large_inc_steps *** adi,agc-lmt-overload-large-inc-steps
	10,		//agc_lmt_overload_small_exceed_counter *** adi,agc-lmt-overload-small-exceed-counter
	5,		//agc_outer_thresh_high *** adi,agc-outer-thresh-high
	2,		//agc_outer_thresh_high_dec_steps *** adi,agc-outer-thresh-high-dec-steps
	18,		//agc_outer_thresh_low *** adi,agc-outer-thresh-low
	2,		//agc_outer_thresh_low_inc_steps *** adi,agc-outer-thresh-low-inc-steps
	1,		//agc_attack_delay_extra_margin_us; *** adi,agc-attack-delay-extra-margin-us
	0,		//agc_sync_for_gain_counter_enable *** adi,agc-sync-for-gain-counter-enable
	/* Fast AGC */
	64,		//fagc_dec_pow_measuremnt_duration ***  adi,fagc-dec-pow-measurement-duration
	260,	//fagc_state_wait_time_ns ***  adi,fagc-state-wait-time-ns
	/* Fast AGC - Low Power */
	0,		//fagc_allow_agc_gain_increase ***  adi,fagc-allow-agc-gain-increase-enable
	5,		//fagc_lp_thresh_increment_time ***  adi,fagc-lp-thresh-increment-time
	1,		//fagc_lp_thresh_increment_steps ***  adi,fagc-lp-thresh-increment-steps
	/* Fast AGC - Lock Level (Lock Level is set via slow AGC inner high threshold) */
	1,		//fagc_lock_level_lmt_gain_increase_en ***  adi,fagc-lock-level-lmt-gain-increase-enable
	5,		//fagc_lock_level_gain_increase_upper_limit ***  adi,fagc-lock-level-gain-increase-upper-limit
	/* Fast AGC - Peak Detectors and Final Settling */
	1,		//fagc_lpf_final_settling_steps ***  adi,fagc-lpf-final-settling-steps
	1,		//fagc_lmt_final_settling_steps ***  adi,fagc-lmt-final-settling-steps
	3,		//fagc_final_overrange_count ***  adi,fagc-final-overrange-count
	/* Fast AGC - Final Power Test */
	0,		//fagc_gain_increase_after_gain_lock_en ***  adi,fagc-gain-increase-after-gain-lock-enable
	/* Fast AGC - Unlocking the Gain */
	0,		//fagc_gain_index_type_after_exit_rx_mode ***  adi,fagc-gain-index-type-after-exit-rx-mode
	1,		//fagc_use_last_lock_level_for_set_gain_en ***  adi,fagc-use-last-lock-level-for-set-gain-enable
	1,		//fagc_rst_gla_stronger_sig_thresh_exceeded_en ***  adi,fagc-rst-gla-stronger-sig-thresh-exceeded-enable
	5,		//fagc_optimized_gain_offset ***  adi,fagc-optimized-gain-offset
	10,		//fagc_rst_gla_stronger_sig_thresh_above_ll ***  adi,fagc-rst-gla-stronger-sig-thresh-above-ll
	1,		//fagc_rst_gla_engergy_lost_sig_thresh_exceeded_en ***  adi,fagc-rst-gla-engergy-lost-sig-thresh-exceeded-enable
	1,		//fagc_rst_gla_engergy_lost_goto_optim_gain_en ***  adi,fagc-rst-gla-engergy-lost-goto-optim-gain-enable
	10,		//fagc_rst_gla_engergy_lost_sig_thresh_below_ll ***  adi,fagc-rst-gla-engergy-lost-sig-thresh-below-ll
	8,		//fagc_energy_lost_stronger_sig_gain_lock_exit_cnt ***  adi,fagc-energy-lost-stronger-sig-gain-lock-exit-cnt
	1,		//fagc_rst_gla_large_adc_overload_en ***  adi,fagc-rst-gla-large-adc-overload-enable
	1,		//fagc_rst_gla_large_lmt_overload_en ***  adi,fagc-rst-gla-large-lmt-overload-enable
	0,		//fagc_rst_gla_en_agc_pulled_high_en ***  adi,fagc-rst-gla-en-agc-pulled-high-enable
	0,		//fagc_rst_gla_if_en_agc_pulled_high_mode ***  adi,fagc-rst-gla-if-en-agc-pulled-high-mode
	64,		//fagc_power_measurement_duration_in_state5 ***  adi,fagc-power-measurement-duration-in-state5
	/* RSSI Control */
	1,		//rssi_delay *** adi,rssi-delay
	1000,	//rssi_duration *** adi,rssi-duration
	3,		//rssi_restart_mode *** adi,rssi-restart-mode
	0,		//rssi_unit_is_rx_samples_enable *** adi,rssi-unit-is-rx-samples-enable
	1,		//rssi_wait *** adi,rssi-wait
	/* Aux ADC Control */
	256,	//aux_adc_decimation *** adi,aux-adc-decimation
	40000000UL,	//aux_adc_rate *** adi,aux-adc-rate
	/* AuxDAC Control */
	1,		//aux_dac_manual_mode_enable ***  adi,aux-dac-manual-mode-enable
	0,		//aux_dac1_default_value_mV ***  adi,aux-dac1-default-value-mV
	0,		//aux_dac1_active_in_rx_enable ***  adi,aux-dac1-active-in-rx-enable
	0,		//aux_dac1_active_in_tx_enable ***  adi,aux-dac1-active-in-tx-enable
	0,		//aux_dac1_active_in_alert_enable ***  adi,aux-dac1-active-in-alert-enable
	0,		//aux_dac1_rx_delay_us ***  adi,aux-dac1-rx-delay-us
	0,		//aux_dac1_tx_delay_us ***  adi,aux-dac1-tx-delay-us
	0,		//aux_dac2_default_value_mV ***  adi,aux-dac2-default-value-mV
	0,		//aux_dac2_active_in_rx_enable ***  adi,aux-dac2-active-in-rx-enable
	0,		//aux_dac2_active_in_tx_enable ***  adi,aux-dac2-active-in-tx-enable
	0,		//aux_dac2_active_in_alert_enable ***  adi,aux-dac2-active-in-alert-enable
	0,		//aux_dac2_rx_delay_us ***  adi,aux-dac2-rx-delay-us
	0,		//aux_dac2_tx_delay_us ***  adi,aux-dac2-tx-delay-us
	/* Temperature Sensor Control */
	256,	//temp_sense_decimation *** adi,temp-sense-decimation
	1000,	//temp_sense_measurement_interval_ms *** adi,temp-sense-measurement-interval-ms
	0xCE,	//temp_sense_offset_signed *** adi,temp-sense-offset-signed
	1,		//temp_sense_periodic_measurement_enable *** adi,temp-sense-periodic-measurement-enable
	/* Control Out Setup */
	0xFF,	//ctrl_outs_enable_mask *** adi,ctrl-outs-enable-mask
	0,		//ctrl_outs_index *** adi,ctrl-outs-index
	/* External LNA Control */
	0,		//elna_settling_delay_ns *** adi,elna-settling-delay-ns
	0,		//elna_gain_mdB *** adi,elna-gain-mdB
	0,		//elna_bypass_loss_mdB *** adi,elna-bypass-loss-mdB
	0,		//elna_rx1_gpo0_control_enable *** adi,elna-rx1-gpo0-control-enable
	0,		//elna_rx2_gpo1_control_enable *** adi,elna-rx2-gpo1-control-enable
	0,		//elna_gaintable_all_index_enable *** adi,elna-gaintable-all-index-enable
	/* Digital Interface Control */
	0,		//digital_interface_tune_skip_mode *** adi,digital-interface-tune-skip-mode
	0,		//digital_interface_tune_fir_disable *** adi,digital-interface-tune-fir-disable
	1,		//pp_tx_swap_enable *** adi,pp-tx-swap-enable
	1,		//pp_rx_swap_enable *** adi,pp-rx-swap-enable
	0,		//tx_channel_swap_enable *** adi,tx-channel-swap-enable
	0,		//rx_channel_swap_enable *** adi,rx-channel-swap-enable
	1,		//rx_frame_pulse_mode_enable *** adi,rx-frame-pulse-mode-enable
	0,		//two_t_two_r_timing_enable *** adi,2t2r-timing-enable
	0,		//invert_data_bus_enable *** adi,invert-data-bus-enable
	0,		//invert_data_clk_enable *** adi,invert-data-clk-enable
	0,		//fdd_alt_word_order_enable *** adi,fdd-alt-word-order-enable
	0,		//invert_rx_frame_enable *** adi,invert-rx-frame-enable
	0,		//fdd_rx_rate_2tx_enable *** adi,fdd-rx-rate-2tx-enable
	0,		//swap_ports_enable *** adi,swap-ports-enable
	0,		//single_data_rate_enable *** adi,single-data-rate-enable
	1,		//lvds_mode_enable *** adi,lvds-mode-enable
	0,		//half_duplex_mode_enable *** adi,half-duplex-mode-enable
	0,		//single_port_mode_enable *** adi,single-port-mode-enable
	0,		//full_port_enable *** adi,full-port-enable
	0,		//full_duplex_swap_bits_enable *** adi,full-duplex-swap-bits-enable
	0,		//delay_rx_data *** adi,delay-rx-data
	0,		//rx_data_clock_delay *** adi,rx-data-clock-delay
	4,		//rx_data_delay *** adi,rx-data-delay
	7,		//tx_fb_clock_delay *** adi,tx-fb-clock-delay
	0,		//tx_data_delay *** adi,tx-data-delay
#ifdef ALTERA_PLATFORM
	300,	//lvds_bias_mV *** adi,lvds-bias-mV
#else
	150,	//lvds_bias_mV *** adi,lvds-bias-mV
#endif
	1,		//lvds_rx_onchip_termination_enable *** adi,lvds-rx-onchip-termination-enable
	0,		//rx1rx2_phase_inversion_en *** adi,rx1-rx2-phase-inversion-enable
	0xFF,	//lvds_invert1_control *** adi,lvds-invert1-control
	0x0F,	//lvds_invert2_control *** adi,lvds-invert2-control
	/* GPO Control */
	0,		//gpo0_inactive_state_high_enable *** adi,gpo0-inactive-state-high-enable
	0,		//gpo1_inactive_state_high_enable *** adi,gpo1-inactive-state-high-enable
	0,		//gpo2_inactive_state_high_enable *** adi,gpo2-inactive-state-high-enable
	0,		//gpo3_inactive_state_high_enable *** adi,gpo3-inactive-state-high-enable
	0,		//gpo0_slave_rx_enable *** adi,gpo0-slave-rx-enable
	0,		//gpo0_slave_tx_enable *** adi,gpo0-slave-tx-enable
	0,		//gpo1_slave_rx_enable *** adi,gpo1-slave-rx-enable
	0,		//gpo1_slave_tx_enable *** adi,gpo1-slave-tx-enable
	0,		//gpo2_slave_rx_enable *** adi,gpo2-slave-rx-enable
	0,		//gpo2_slave_tx_enable *** adi,gpo2-slave-tx-enable
	0,		//gpo3_slave_rx_enable *** adi,gpo3-slave-rx-enable
	0,		//gpo3_slave_tx_enable *** adi,gpo3-slave-tx-enable
	0,		//gpo0_rx_delay_us *** adi,gpo0-rx-delay-us
	0,		//gpo0_tx_delay_us *** adi,gpo0-tx-delay-us
	0,		//gpo1_rx_delay_us *** adi,gpo1-rx-delay-us
	0,		//gpo1_tx_delay_us *** adi,gpo1-tx-delay-us
	0,		//gpo2_rx_delay_us *** adi,gpo2-rx-delay-us
	0,		//gpo2_tx_delay_us *** adi,gpo2-tx-delay-us
	0,		//gpo3_rx_delay_us *** adi,gpo3-rx-delay-us
	0,		//gpo3_tx_delay_us *** adi,gpo3-tx-delay-us
	/* Tx Monitor Control */
	37000,	//low_high_gain_threshold_mdB *** adi,txmon-low-high-thresh
	0,		//low_gain_dB *** adi,txmon-low-gain
	24,		//high_gain_dB *** adi,txmon-high-gain
	0,		//tx_mon_track_en *** adi,txmon-dc-tracking-enable
	0,		//one_shot_mode_en *** adi,txmon-one-shot-mode-enable
	511,	//tx_mon_delay *** adi,txmon-delay
	8192,	//tx_mon_duration *** adi,txmon-duration
	2,		//tx1_mon_front_end_gain *** adi,txmon-1-front-end-gain
	2,		//tx2_mon_front_end_gain *** adi,txmon-2-front-end-gain
	48,		//tx1_mon_lo_cm *** adi,txmon-1-lo-cm
	48,		//tx2_mon_lo_cm *** adi,txmon-2-lo-cm
	/* GPIO definitions */
	-1,		//gpio_resetb *** reset-gpios
	/* MCS Sync */
	-1,		//gpio_sync *** sync-gpios
	-1,		//gpio_cal_sw1 *** cal-sw1-gpios
	-1,		//gpio_cal_sw2 *** cal-sw2-gpios
	/* External LO clocks */
	NULL,	//(*ad9361_rfpll_ext_recalc_rate)()
	NULL,	//(*ad9361_rfpll_ext_round_rate)()
	NULL	//(*ad9361_rfpll_ext_set_rate)()
};

AD9361_RXFIRConfig rx_fir_config = {	// BPF PASSBAND 3/20 fs to 1/4 fs
	3, // rx
	-100, // rx_gain   //was 0 (Wei)
	1, // rx_dec
	{-4, -6, -37, 35, 186, 86, -284, -315,
	 107, 219, -4, 271, 558, -307, -1182, -356,
	 658, 157, 207, 1648, 790, -2525, -2553, 748,
	 865, -476, 3737, 6560, -3583, -14731, -5278, 14819,
	 14819, -5278, -14731, -3583, 6560, 3737, -476, 865,
	 748, -2553, -2525, 790, 1648, 207, 157, 658,
	 -356, -1182, -307, 558, 271, -4, 219, 107,
	 -315, -284, 86, 186, 35, -37, -6, -4,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0}, // rx_coef[128]
	 64, // rx_coef_size
	 {0, 0, 0, 0, 0, 0}, //rx_path_clks[6]
	 0 // rx_bandwidth
};

AD9361_TXFIRConfig tx_fir_config = {	// BPF PASSBAND 3/20 fs to 1/4 fs
	3, // tx
	-6, // tx_gain
	1, // tx_int
	{-4, -6, -37, 35, 186, 86, -284, -315,
	 107, 219, -4, 271, 558, -307, -1182, -356,
	 658, 157, 207, 1648, 790, -2525, -2553, 748,
	 865, -476, 3737, 6560, -3583, -14731, -5278, 14819,
	 14819, -5278, -14731, -3583, 6560, 3737, -476, 865,
	 748, -2553, -2525, 790, 1648, 207, 157, 658,
	 -356, -1182, -307, 558, 271, -4, 219, 107,
	 -315, -284, 86, 186, 35, -37, -6, -4,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 0}, // tx_coef[128]
	 64, // tx_coef_size
	 {0, 0, 0, 0, 0, 0}, // tx_path_clks[6]
	 0 // tx_bandwidth
};
struct ad9361_rf_phy *ad9361_phy;


/***************************************************************************//**
 * @brief main
*******************************************************************************/

int main(void)
{
#ifdef XILINX_PLATFORM
	Xil_ICacheEnable();
	Xil_DCacheEnable();
#endif



	// NOTE: The user has to choose the GPIO numbers according to desired
	// carrier board.
	default_init_param.gpio_resetb = GPIO_RESET_PIN;


	default_init_param.gpio_sync = -1;
	default_init_param.gpio_cal_sw1 = -1;
	default_init_param.gpio_cal_sw2 = -1;


	gpio_init(GPIO_DEVICE_ID);

	gpio_direction(default_init_param.gpio_resetb, 1);


	// Setup GPSDO GPIO
	gpioGPSDO_config = XGpio_LookupConfig(AXI_GPSDO_GPIO_DEVICE_ID);
	XGpio_CfgInitialize(&gpioGPSDO, gpioGPSDO_config, gpioGPSDO_config->BaseAddress);

	XGpio_SetDataDirection(&gpioGPSDO, 1, 0x0);

	// bit 0 : 0- for internal GPS PPS; 1- for external PPS INPUT
	// bit 2-1 : 00- FPGA_REF_CLK; 01- FPGA_CLK_40M; 10- AD9361_CLK_OUT; 11- ADC Clock Rate
	// Ex: FPGA_RER_CLK with external PPS INPUT : 001 => 0x01;			(0x00 for  FPGA_RER_CLK with internal GPS_PPS)
	// Ex: FPGA_CLK_40M with external PPS INPUT : 011 => 0x03;			(0x02 for  FPGA_CLK_40M with internal GPS_PPS)
	// Ex: AD9361_CLK_OUT with external PPS INPUT : 101 => 0x05;			(0x04 for  AD9361_CLK_OUT with internal GPS_PPS)
	// Ex:  ADC Clock Rate with external PPS INPUT : 111 => 0x07;			(0x06 for  ADC Clock Rate with internal GPS_PPS)

	XGpio_DiscreteWrite(&gpioGPSDO, 1, 0x03);
	sleep(1);

	// Setup GPSDO
	spi_init_gpsdo(GPSDO_SPI_DEVICE_ID, 1, 1);


	unsigned char initLatch[] = {0x1D, 0xAF, 0x83};
	unsigned char initLatchPD[] = {0x1D, 0xAF, 0x8B};

	unsigned char refCntLatch[] = {0x12, 0x00, 0x04};
	unsigned char nCntLatch[] = {0x20, 0x04, 0x01};
	unsigned char functionLatch[] = {0x08, 0x26, 0x82};
	unsigned char functionLatchReset[] = {0x08, 0x27, 0x86};

	// Power down and up the 4002
	spi_write_gpsdo(0, initLatchPD, 3);
	sleep(4);
	spi_write_gpsdo(0, initLatch, 3);
	sleep(4);

	// Program 4002 using Counter reset method
	spi_write_gpsdo(0, functionLatchReset, 3);
	usleep(3);
	spi_write_gpsdo(0, refCntLatch, 3);
	usleep(1);
	spi_write_gpsdo(0, nCntLatch, 3);
	usleep(1);
	spi_write_gpsdo(0, functionLatch, 3);
	usleep(1);


	// Setup SDR
	spi_init(SPI_DEVICE_ID, 1, 0);

	if (AD9364_DEVICE)
		default_init_param.dev_sel = ID_AD9364;
	if (AD9363A_DEVICE)
		default_init_param.dev_sel = ID_AD9363A;

	ad9361_init(&ad9361_phy, &default_init_param);


//--------------------------------------------------------------------------------
	printf("Initializing AXI GPIO 0...\n");

	// Initialize AXI GPIO 0
	if (XGpio_Initialize(&axi_gpio_inst_0, AXI_GPIO_DEVICE_ID_0) != XST_SUCCESS) {
	    printf("Failed to initialize AXI GPIO 0!\n");
	    return 1;
	}

	// Set GPIO channel as input
	XGpio_SetDataDirection(&axi_gpio_inst_0, GPIO_CHANNEL_1, 0xFFFFFFFF);
	XGpio_SetDataDirection(&axi_gpio_inst_0, GPIO_CHANNEL_2, 0xFFFFFFFF);
	printf("AXI GPIO 0 Initialized Successfully.\n");
//--------------------------------------------------------------------------------
	printf("Initializing AXI GPIO 1...\n");

	// Initialize AXI GPIO 1
	if (XGpio_Initialize(&axi_gpio_inst_1, AXI_GPIO_DEVICE_ID_1) != XST_SUCCESS) {
	    printf("Failed to initialize AXI GPIO 1!\n");
	    return 1;
	}

	// Set GPIO channel as input
	XGpio_SetDataDirection(&axi_gpio_inst_1, GPIO_CHANNEL_1, 0xFFFFFFFF);
	XGpio_SetDataDirection(&axi_gpio_inst_1, GPIO_CHANNEL_2, 0xFFFFFFFF);
	printf("AXI GPIO 1 Initialized Successfully.\n");
//--------------------------------------------------------------------------------
	printf("Initializing AXI GPIO 2...\n");

	// Initialize AXI GPIO 1
	if (XGpio_Initialize(&axi_gpio_inst_2, AXI_GPIO_DEVICE_ID_2) != XST_SUCCESS) {
		printf("Failed to initialize AXI GPIO 2!\n");
		return 1;
	}

	// Set GPIO channel as input
	XGpio_SetDataDirection(&axi_gpio_inst_2, GPIO_CHANNEL_1, 0xFFFFFFFF);
	XGpio_SetDataDirection(&axi_gpio_inst_2, GPIO_CHANNEL_2, 0xFFFFFFFF);
	printf("AXI GPIO 2 Initialized Successfully.\n");
//--------------------------------------------------------------------------------
	// Set Data Direction for channel 2 for gpioGPSDO used for thresholding
	XGpio_SetDataDirection(&gpioGPSDO, GPIO_CHANNEL_1, 0x00000000);  // Output
	XGpio_SetDataDirection(&gpioGPSDO, GPIO_CHANNEL_2, 0x00000000);  // Output
	printf("Channel 2 of gpioGPSDO Initialized Successfully.\n");
//--------------------------------------------------------------------------------
//	// Initialize
//	printf("Initializing AXI Peak Detector...\n");
//	if ( XGpio_Initialize(&axi_gpio_peak_detector, AXI_GPIO_PEAK_DETECTOR_DEVICE_ID) != XST_SUCCESS) {
//		printf("Failed to initialize AXI Peak Detector!\n");
//		return 1;
//	}
//	XGpio_SetDataDirection(&axi_gpio_peak_detector, GPIO_CHANNEL_1, 0x00000000);  // Output
//	XGpio_SetDataDirection(&axi_gpio_peak_detector, GPIO_CHANNEL_2, 0x00000000);  // Output
//
//	printf("AXI Peak Detector Initialized Successfully.\n");
////--------------------------------------------------------------------------------

	ad9361_set_tx_fir_config(ad9361_phy, tx_fir_config);
	ad9361_set_rx_fir_config(ad9361_phy, rx_fir_config);


	// Start of AD9361 SDR configuration added by Dilhan

	int status;

	// Getting SDR config status

	printf("\n*******\n");
	printf("******* Get SDR configuration   *******\n");
	printf("*******\n\n");
	uint32_t bandwidth_hz ;;
	status = ad9361_get_rx_rf_bandwidth(ad9361_phy,&bandwidth_hz);
	printf("rx_rf_bandwidth= %lu\n", bandwidth_hz);

	int32_t gain_db,gain_db1;
	status = ad9361_get_rx_rf_gain (ad9361_phy, 0,&gain_db);
	printf("rx1_rf_ch0_gain= %ld\n", gain_db);

	status = ad9361_get_rx_rf_gain (ad9361_phy, 1,&gain_db1);
	printf("rx1_rf_ch1_gain= %ld\n", gain_db1);
	printf("SDR operates in single channel mode. Channel 1 gain is set to zeros by the system\n");

	uint32_t sampling_freq_hz;
	status =ad9361_get_tx_sampling_freq (ad9361_phy, &sampling_freq_hz);
	printf("tx_samp_freq= %lu\n", sampling_freq_hz);

	status =ad9361_get_rx_sampling_freq (ad9361_phy, &sampling_freq_hz);
	printf("rx_samp_freq= %lu\n", sampling_freq_hz);

	uint64_t lo_freq_hz;
	status = ad9361_get_rx_lo_freq (ad9361_phy, &lo_freq_hz);
	printf("rx_lo_freq= %llu\n", lo_freq_hz);

	status = ad9361_get_tx_lo_freq (ad9361_phy, &lo_freq_hz);
	printf("tx_lo_freq= %llu\n", lo_freq_hz);

	// Setting SDR config status
	printf("\n*******\n");
	printf("******* Set SDR configuration   *******\n");
	printf("*******\n\n");


	sampling_freq_hz = 61440000;
	status = ad9361_set_rx_sampling_freq(ad9361_phy, sampling_freq_hz);
	if(status < 0)
	{
		printf("Failed to set rx_samp_freq with error code : %d\n", status);
	}
	usleep(2000);
	status = ad9361_get_rx_sampling_freq(ad9361_phy, &sampling_freq_hz);
	dds_update(ad9361_phy);
	printf("rx_samp_freq set to : %lu\n", sampling_freq_hz);

	gain_db = 36;
	gain_db1 = 42;
	/* Set the receive RF gain for the selected channel. */
	status = ad9361_set_rx_rf_gain (ad9361_phy, 0,gain_db);
	if(status < 0)
	{
		printf("Failed to set rx_ch0_rf_gain with error code : %d\n", status);
	}
	usleep(2000);
	status = ad9361_get_rx_rf_gain (ad9361_phy, 0,&gain_db);
	printf("rx_ch0_rf_gain set to : %ld\n", gain_db);

	status = ad9361_set_rx_rf_gain (ad9361_phy, 1,gain_db1);
	if(status < 0)
	{
		printf("Failed to set rx_ch1_rf_gain with error code : %d\n", status);
	}
	usleep(2000);
	status = ad9361_get_rx_rf_gain (ad9361_phy, 1,&gain_db1);
	printf("rx_ch1_rf_gain set to : %ld\n", gain_db1);
	printf("SDR operates in single channel mode. Channel 1 gain is set to zeros by the system\n");

	lo_freq_hz =1030000000UL;
	status = ad9361_set_rx_lo_freq (ad9361_phy, lo_freq_hz);
	if(status < 0)
	{
		printf("Failed to set rx_lo_freq with error code : %d\n", status);
	}
	usleep(2000);
	status = ad9361_get_rx_lo_freq (ad9361_phy, &lo_freq_hz);
	printf("rx_lo_freq set to : %llu\n", lo_freq_hz);

	status = ad9361_set_tx_lo_freq (ad9361_phy, lo_freq_hz);
	if(status < 0)
	{
		printf("Failed to set tx_lo_freq with error code : %d\n", status);
	}
	usleep(2000);
	status = ad9361_get_tx_lo_freq (ad9361_phy, &lo_freq_hz);
	printf("tx_lo_freq set to : %llu\n", lo_freq_hz);

	bandwidth_hz = 5000000UL;
	status = ad9361_set_rx_rf_bandwidth (ad9361_phy,  bandwidth_hz);
	if(status < 0)
	{
		printf("Failed to set rx_rf_bandwidth with error code : %d\n", status);
	}
	usleep(2000);
	status = ad9361_get_rx_rf_bandwidth(ad9361_phy,&bandwidth_hz);
	printf("rx_rf_bandwidth set to : %lu\n", bandwidth_hz);

	printf("\n\n");

	// End of AD9361 SDR configuration added by Dilhan



#ifndef AXI_ADC_NOT_PRESENT
#if defined XILINX_PLATFORM || defined LINUX_PLATFORM || defined ALTERA_PLATFORM

	dac_init(ad9361_phy, DATA_SEL_DDS, 1);
#endif
#endif



#ifndef AXI_ADC_NOT_PRESENT
#if (defined XILINX_PLATFORM || defined ALTERA_PLATFORM) && \
	(defined ADC_DMA_EXAMPLE || defined ADC_DMA_IRQ_EXAMPLE)
    // NOTE: To prevent unwanted data loss, it's recommended to invalidate
    // cache after each adc_capture() call, keeping in mind that the
    // size of the capture and the start address must be alinged to the size
    // of the cache line.
	mdelay(1000);
	adc_capture(16384, ADC_DDR_BASEADDR);
#ifdef XILINX_PLATFORM

	Xil_DCacheInvalidateRange(ADC_DDR_BASEADDR,ad9361_phy->pdata->rx2tx2 ? 16384 * 8 : 16384 * 4);
#endif
#endif
#endif



	// Setup UART for GPS and GPS-PPS

	const u32 buffSize = 256;
	u8 uartRecvBufferMain[buffSize];
	u8 *uartRecvBufferPtr = uartRecvBufferMain;
	unsigned int ReceivedCount = 0;
	unsigned int TotalRecvCnt = 0;

	XUartPs GPS_Uart_Ps;	//UART

	struct uartIRQcallback uartIRQCallbackRef;
	uartIRQCallbackRef.XUartPsObj = &GPS_Uart_Ps;
	uartIRQCallbackRef.uart_RecvBufferPtr = uartRecvBufferMain;
	uartIRQCallbackRef.uart_RecvBuffer = uartRecvBufferMain;
	uartIRQCallbackRef.uart_BUFFER_SIZE = buffSize;
	uartIRQCallbackRef.TotalRecvCnt = 0;
	uartIRQCallbackRef.uart_time_out_flag = 0;

	XUartPsFormat uart_format;
	uart_format.BaudRate = 38400;
	uart_format.DataBits = XUARTPS_FORMAT_8_BITS;
	uart_format.Parity = XUARTPS_FORMAT_NO_PARITY;
	uart_format.StopBits = XUARTPS_FORMAT_1_STOP_BIT;

	status =  Uart_Init(&uartIRQCallbackRef, GPS_UART_DEVICE_ID, &uart_format);


//	u8 uart2gps_disable_gxgsa[]={0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x02,0x00,0xFC,0x13};
//	u8 uart2gps_disable_gxgsv[]={0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x03,0x00,0xFD,0x15};
//	u8 uart2gps_disable_gxgll[]={0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x01,0x00,0xFB,0x11};
//	u8 uart2gps_disable_gxvyg[]={0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x05,0x00,0xFF,0x19};
//	//u8 uart2gps_disable_gxgga[]={0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x00,0x00,0xFA,0x0F};
//	u8 uart2gps_enable_gxgga[]={0xb5,0x62,0x06,0x01,0x08,0x00,0xf0,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x05,0x38,0xb5,0x62,0x06,0x01,0x02,0x00,0xf0,0x00,0xf9,0x11};
//	u8 uart2gps_enble_timegps[]={0xB5,0x62,0x06,0x01,0x03,0x00,0x01,0x20,0x01,0x2C,0x83};
//	u8 uart2gps_gnss[]=/*gps*/{0xB5,0x62,0x06,0x3E,0x2C,0x00,0x00,0x00,0x20,0x05,0x00,0x08,0x10,0x00,0x01,0x00,0x01,0x01,0x01,0x01,0x03,0x00,0x00,0x00,0x01,0x01,0x03,0x08,0x10,0x00,0x00,0x00,0x01,0x01,0x05,0x00,0x03,0x00,0x00,0x00,0x01,0x01,0x06,0x08,0x0E,0x00,0x00,0x00,0x01,0x01,0xFC,0x11};
//	u8 uart2gps_nav5[]=/*utc-standard:gps time*/{0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x00,0x03,0x00,0x00,0x00,0x00,0x10,0x27,0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x2C,0x01,0x00,0x3C,0x00,0x00,0x00,0x00,0xC8,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x17,0x6E};
//	//u8 uart2gps_tp5[]=/*1Mpps,gps-time*/{0xB5,0x62,0x06,0x31,0x20,0x00,0x00,0x01,0x00,0x00,0x32,0x00,0x00,0x00,0x40,0x42,0x0F,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9A,0x99,0x99,0x19,0x00,0x00,0x00,0x00,0xE7,0x00,0x00,0x00,0xE8,0xF0};
//	u8 uart2gps_tp5[]=/*1pps,gps-time*/{0xB5,0x62,0x06,0x31,0x20,0x00,0x00,0x01,0x00,0x00,0x32,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9A,0x99,0x99,0x19,0x00,0x00,0x00,0x00,0xEF,0x00,0x00,0x00,0x60,0xF0};
//	//u8 uart2gps_tp5[]=/*1kpps,gps-time*/{0xB5,0x62,0x06,0x31,0x20,0x00,0x00,0x01,0x00,0x00,0x32,0x00,0x00,0x00,0x40,0x42,0x0F,0x00,0xE8,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x9A,0x99,0x99,0x19,0x00,0x00,0x00,0x00,0xE7,0x00,0x00,0x00,0xD2,0x35};
//	//u8 uart2gps_rate[]=/*500ms per time*/{0xB5,0x62,0x06,0x08,0x06,0x00,0xF4,0x01,0x01,0x00,0x01,0x00,0x0B,0x77};
//	usleep(2000);
//	uart_send(&GPS_Uart_Ps,uart2gps_disable_gxgsa,sizeof(uart2gps_disable_gxgsa));usleep(2000);
//	uart_send(&GPS_Uart_Ps,uart2gps_disable_gxgsv,sizeof(uart2gps_disable_gxgsv));usleep(2000);
//	uart_send(&GPS_Uart_Ps,uart2gps_disable_gxgll,sizeof(uart2gps_disable_gxgll));usleep(2000);
//	uart_send(&GPS_Uart_Ps,uart2gps_disable_gxvyg,sizeof(uart2gps_disable_gxvyg));usleep(2000);
//	uart_send(&GPS_Uart_Ps,uart2gps_enable_gxgga,sizeof(uart2gps_enable_gxgga));usleep(2000);
//	//uart_send(&GPS_Uart_Ps,uart2gps_disable_gxgga,sizeof(uart2gps_disable_gxgga));usleep(2000);
//	uart_send(&GPS_Uart_Ps,uart2gps_enble_timegps,sizeof(uart2gps_enble_timegps));usleep(2000);
//	uart_send(&GPS_Uart_Ps,uart2gps_gnss,sizeof(uart2gps_gnss));usleep(2000);
//	uart_send(&GPS_Uart_Ps,uart2gps_nav5,sizeof(uart2gps_nav5));usleep(2000);
//	uart_send(&GPS_Uart_Ps,uart2gps_tp5,sizeof(uart2gps_tp5));usleep(2000);


	u8 modify_GPS_settings[] = {0xB5, 0x62, 0x06, 0x3E, 0x3C, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x01, 0x00, 0x01, 0x01, 0x02, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x01, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x01, 0x05, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x01, 0x06, 0x08, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2F, 0xA1, 0xB5, 0x62, 0x06, 0x3E, 0x00, 0x00, 0x44, 0xD2};
	uart_send(uartIRQCallbackRef.XUartPsObj,modify_GPS_settings,sizeof(modify_GPS_settings));usleep(2000);
	//u8 set_baudrate_9600[] = {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00, 0x00, 0x80, 0x25, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0xcd, 0xb5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22};
	//uart_send(uartIRQCallbackRef.XUartPsObj,set_baudrate_9600,sizeof(set_baudrate_9600));usleep(2000);
	u8 rmc_and_gga[] ={0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x00, 0xFA, 0x0F, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x01, 0x00, 0xFB, 0x11, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x02, 0x00, 0xFC, 0x13, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x05, 0x00, 0xFF, 0x19, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x01, 0xFB, 0x10, 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31, 0xBF};
	uart_send(uartIRQCallbackRef.XUartPsObj,rmc_and_gga,sizeof(rmc_and_gga));usleep(2000);
	u8 save_data[] = {0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31, 0xBF};
	uart_send(uartIRQCallbackRef.XUartPsObj,save_data,sizeof(save_data));usleep(2000);



	int rx2tx2 = ad9361_phy->pdata->rx2tx2 ;
	if (rx2tx2)
		printf("rx2-tx2\r\n");
	else
		printf("no rx2-tx2\r\n");


//	printf("start display rx data\r\n");
//
//	unsigned int d32 , i ;
//    short h16 , l16 ;
//    for( i=0 ; i < 256 ; i+=1 ) {
//		d32 = *(volatile unsigned int *)( ADC_DDR_BASEADDR + i*4 );
//		l16 = d32 & 0x0ffff ;
//		h16 = (d32>>16) & 0x0ffff ;
//		printf("%d,%d\n",(short)l16,(short)h16);
//	}
//
//    printf("start display done\r\n");

	uint32_t word_191_160;
	uint32_t word_159_128;
	uint32_t word_127_96;
	uint32_t word_95_64;
	uint32_t word_63_32;
	uint32_t word_31_0;

	uint32_t prev_word_191_160 = 0;
	uint32_t prev_word_159_128 = 0;
	uint32_t prev_word_127_96  = 0;
	uint32_t prev_word_95_64   = 0;
	uint32_t prev_word_63_32   = 0;
	uint32_t prev_word_31_0    = 0;

////--------------------------------------------------------------------------------------
	while (1) {
	    // Read upper 64 bits
	    word_191_160 = XGpio_DiscreteRead(&axi_gpio_inst_0, GPIO_CHANNEL_1);  // [191:160]
	    word_159_128 = XGpio_DiscreteRead(&axi_gpio_inst_0, GPIO_CHANNEL_2);  // [159:128]

	    // Read middle 64 bits
	    word_127_96  = XGpio_DiscreteRead(&axi_gpio_inst_1, GPIO_CHANNEL_1);  // [127:96]
	    word_95_64   = XGpio_DiscreteRead(&axi_gpio_inst_1, GPIO_CHANNEL_2);  // [95:64]

	    // Read lower 64 bits
	    word_63_32   = XGpio_DiscreteRead(&axi_gpio_inst_2, GPIO_CHANNEL_1);  // [63:32]
	    word_31_0    = XGpio_DiscreteRead(&axi_gpio_inst_2, GPIO_CHANNEL_2);  // [31:0]

//	    if (word_191_160 != prev_word_191_160 ||
//	        word_159_128 != prev_word_159_128 ||
//	        word_127_96  != prev_word_127_96  ||
//	        word_95_64   != prev_word_95_64   ||
//	        word_63_32   != prev_word_63_32   ||
//	        word_31_0    != prev_word_31_0) {
//
//	        // Full 192-bit frame (MSW .. LSW)
//	        printf("%08X%08X%08X%08X%08X%08X\n",
//	               word_191_160, word_159_128, word_127_96, word_95_64, word_63_32, word_31_0);
//
//	        // Update previous values
//	        prev_word_191_160 = word_191_160;
//	        prev_word_159_128 = word_159_128;
//	        prev_word_127_96  = word_127_96;
//	        prev_word_95_64   = word_95_64;
//	        prev_word_63_32   = word_63_32;
//	        prev_word_31_0    = word_31_0;
//	    }
        // Initialize threshold values
	    XGpio_DiscreteWrite(&gpioGPSDO, GPIO_CHANNEL_1, 0x190);
        XGpio_DiscreteWrite(&gpioGPSDO, GPIO_CHANNEL_2, 0x190);
//        XGpio_DiscreteWrite(&axi_gpio_peak_detector, GPIO_CHANNEL_1, 0x10);
//        XGpio_DiscreteWrite(&axi_gpio_peak_detector, GPIO_CHANNEL_2, 0x5);
        //sleep(0.2); // Read every second

//        ReceivedCount = 0;
//        TotalRecvCnt = 0;
//
//        while(TotalRecvCnt < buffSize/2)
//        {
//			ReceivedCount = XUartPs_Recv(&GPS_Uart_Ps, uartRecvBufferPtr, (buffSize-TotalRecvCnt)) ;
//			TotalRecvCnt += ReceivedCount ;
//			uartRecvBufferPtr += ReceivedCount;
//        }
//    	printf("\n");
//    	for(u32 idx=0; idx <TotalRecvCnt; idx++)
//    	{
//    		printf("%c", uartRecvBufferMain[idx]);
//    	}
//    	printf("\n");
//
//    	uartRecvBufferPtr = uartRecvBufferMain;

    }
////--------------------------------------------------------------------------------------


	printf("Done.\n");


#ifdef XILINX_PLATFORM
	Xil_DCacheDisable();
	Xil_ICacheDisable();
#endif

	return 0;
}
